
  What is this?
  *************

  This (sgui) is a miniature cross platform GUI library that originally
  started out as an overgrown Xlib play pen.

  The whole library is written in plain ANSI C (C89) with a simple build
  system consisting of a single shell script that keeps track of changes and
  executes gcc for the *nix version and mingw for the WinDOS cross
  compilation.

  The 's' in "sgui" really was intended to mean "small" or "simple", but over
  time, lots of other possible meanings for the letter 's' came to my mind, so
  the s stands for whatever you want it to.


  What's the status?
  ******************

  There are working Xlib and WinDOS back ends that basically mange a window,
  handle input and provide an implementation of an abstract canvas type for
  rendering. Widgets are managed by a widget manager.

  Widgets render themselves using a canvas object (e.g. from a window) and
  by using a skinning subsystem.

  Font rasterisation is done using FreeType 2 directly through wrapper
  functions.

  There is a signals & slots like widget intercommunication, called "links",
  i.e. one can register an arbitrary function to a widget with arguments and
  when a given event gets triggered, the functions registered for that event
  gets called with the registered parameters.

  On my system, the library compiles without warnings with all gcc warning
  flags set and has, according to valgrind, no memory leaks (except for a
  leak inside Xlib, or is it a valgrind bug?) and the WinDOS port has been
  confirmed to work under Wine, WinDOS 7 (32 & 64 Bit) and WinDOS 98 on a
  machine from 2005.


  What are your plans?
  ********************

  Short term:
    - Add more useful widgets
    - OpenGL back end
    - Port xlib code to xcb

  Mid term:
    - Loadable GUI skin
    - Built in dialog boxes like message box, file open and file safe
    - Assure thread safety

  Long term:
    - Figure out why I'm doing this
    - Write small, real world applications that actually use the library


  At all times:
    - Keep at least the Xlib port stable, safe and leak free
    - Don't produce compiler warnings
    - Pass through valgrind flawlessly


  There are so many GUI libraries out there, why roll your own?
  *************************************************************

  I don't really know. So far it has been educational and I enjoy working on
  it. When I first started it, I used it as a distraction and to kill
  boredomness. Right now I have too much time on my hands and nothing else to
  do.

  The idea of piecing together a GUI library first emerged when we got a
  different CS teacher at school who wanted us to "...do something with GUI
  and stuff..." and demonstrated his VisualBASIC copy and paste skills.

  (No need to worry tough: He actually didn't care whether we used VB and
   wasn't in class most of the time anyway. He just wanted us to have results
   to show off at the end of his horribly overblown time frames, like e.g. 3
   months for an application that "...does something with GUI on it...")

  At that point, I realized that most GUI toolkits where either totally
  overblown (I tried GTK and settled for QT), or have a horrible, undocumented
  API (I tried FLTK). Also I wanted something that can be used in an OpenGL
  application and rendered into an OpenGL texture ("...make something
  original, see you in six months...". I actually managed to make a QT based
  "3D browser", but QT off screen rendering was just a BIG, UGLY hack).

  If I rolled my own, >I< don't have all of those problems. The GUI library
  fits all my needs and I don't need a documentation, as I know the functions
  that are there and how the thing works internally.

  So basically it started out to fit my own needs.


  This is shit!
  *************

  Hence the name sgui. If you have suggestions for improvements, drop me a
  line.


  License
  *******

 Copyright (C) 2012 - David Oberhollenzer

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.

