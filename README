
  What is this?
  *************

  This (sgui) is a miniature cross platform GUI library that originally
  started out as an overgrown Xlib play pen.

  The whole library is written in plain ANSI C (C89) with a simple build
  system consisting of a single shell script per platform that keeps track of
  changes and executes gcc for the *nix version and mingw for the WinDOS cross
  compilation.

  The 's' in "sgui" really was intended to mean "small" or "simple", but over
  time, lots of other possible meanings for the letter 's' came to my mind, so
  the s stands for whatever you want it to.

  The main motivation was to write a simple, small GUI systems for small
  aplications that need a simple, "just works" GUI, after being unsatisfied
  with existing GUI solutions that are incredibly huge, bloated, resource
  hogging monsters that tend to be hard to use, if not even forcing a specific
  structure to your code and requiring a custom pre-preprocessor (you know the
  one I mean^^). It should be simple, small, easy to use and preferably in C.

  Also, I was in the need for a something that had "just works" support for
  modern OpenGL (3.x/4.x core), including easy off-screen rendering to
  textures.

  Apperently something like that is rather hard to come by, so I rolled my
  own, starting with an Xlib play pen to kill boredomeness.


  What's the status?
  ******************

  There are working Xlib and WinDOS backends that basically mange a window,
  handle input and provide an implementation of an abstract canvas type for
  rendering. Widgets are managed by a widget manager.

  Widgets render themselves using a canvas object (e.g. from a window) and
  by using a skinning subsystem.

  Font rasterisation is done using FreeType 2 directly through wrapper
  functions.

  Widget events (e.g. button pressed, checkbox checked, ...) and window
  events (e.g. left clicked, 's' key pressed, window closed, ...) can be
  received over callbacks.

  OpenGL context creation works and the OpenGL back end is work in progress.

  Currently, the code is being reviewed, cleaned and simplified. Documentation
  writing has begun and is in progress.

  The library has been compiled and tested on multiple GNU/Linux systems
  without warnings with all gcc warning flags set and has, according to
  valgrind, no memory leaks (except for a leak inside Xlib, or is it a
  valgrind bug?) and the WinDOS port has been confirmed to work under Wine,
  WinDOS 7 (32 & 64 Bit) and WinDOS 98 on a machine from 2005. A test
  application has been successuflly compiled with MSVC 2010 Express under
  WinDOS 7. The whole thing compiles and runs on the Raspberry PI under Arch
  ARM, but does not work properly yet.


  ADHD version: Things are starting to come together nicely and It'd be nice
  if you gave it a try and sent me some feedback, but I wouldn't exactly 
  advice people to use the library for production use.


  What are your plans?
  ********************

  Short term:
    - Tidy and simplify code
        - Mainly backend cleans
        - Utilize backend API for drawing
        - Reduce memory hogging
    - Complete OpenGL backend
        - Complete method stubs
        - OpenGL sub windows (no difference to normal windows for users)
        - Keep abstract and reusable (think of possible OpenGL ES and
          Direct3D expansions)
    - Complete documentation
        - Internal structure in hacking chapter once settled
    - Add more useful widgets
    - Outline thread safety
        - How can the library be used/benefit in a multithreaded program?
        - Single GUI thread only?
        - What functions can be used in seperate threads?
        - Add mutices where needed (e.g. backend code)?

  Mid term:
    - Loadable GUI skin
    - Built in dialog boxes like message box, file open and file safe


  At all times:
    - Keep at least the Xlib port stable, safe and leak free
    - Don't produce compiler warnings
    - Pass through valgrind flawlessly


  This is shit!
  *************

  Hence the name sgui. If you have suggestions for improvements, drop me a
  line.


  License
  *******

 Copyright (C) 2012 - David Oberhollenzer

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.

