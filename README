
  What is this?
  *************

  This (sgui) is a miniature cross platform GUI library that originally
  started out as an overgrown Xlib play pen.

  The whole library is written in plain ANSI C (C89) with a simple build
  system consisting of a single shell script that keeps track of changes and
  executes gcc for the *nix version and mingw for the WinDOS cross
  compilation.

  The 's' in "sgui" really was intended to mean "small" or "simple", but over
  time, lots of other possible meanings for the letter 's' came to my mind, so
  the s stands for whatever you want it to.


  What's the status?
  ******************

  There are working Xlib and WinDOS back ends that basically mange a window,
  handle input and provide an implementation of an abstract canvas type for
  rendering. Widgets are managed by a widget manager.

  Widgets render themselves using a canvas object (e.g. from a window) and
  by using a skinning subsystem.

  Font rasterisation is done using FreeType 2 directly through wrapper
  functions.

  Widget events (e.g. button pressed, checkbox checked, ...) and window
  events (e.g. left clicked, 's' key pressed, window closed, ...) can be
  received over callbacks, registered at a centralized location.

  On my system, the library compiles without warnings with all gcc warning
  flags set and has, according to valgrind, no memory leaks (except for a
  leak inside Xlib, or is it a valgrind bug?) and the WinDOS port has been
  confirmed to work under Wine, WinDOS 7 (32 & 64 Bit) and WinDOS 98 on a
  machine from 2005.


  ADHD version: Things are starting to come together nicely but I wouldn't
  exactly advice people to use the library for daily needs.


  What are your plans?
  ********************

  Short term:
    - Tidy and simplify code
    - Write OpenGL back end
    - Add more useful widgets
    - Write documentation
    - Assure thread safety

  Mid term:
    - Loadable GUI skin
    - Built in dialog boxes like message box, file open and file safe

  Long term:
    - Figure out why I'm doing this
    - Write small, real world applications that actually use the library


  At all times:
    - Keep at least the Xlib port stable, safe and leak free
    - Don't produce compiler warnings
    - Pass through valgrind flawlessly


  There are so many GUI libraries out there, why roll your own?
  *************************************************************

  Because reason! (plus insanity, time and the C programming language)

  The whole thing started out as an Xlib play pen I used to look busy, so our
  teacher in engineering school would not suspect that I'm already done with
  my project for months.

  By posing that I actually need the insanely long timeframe he gave me, I
  wouldn't get additional boring assignments and could do what I was
  interessted in. (Coming up with a story what I did last time and showing
  some code fragments was not that much of a problem and the hardware team was
  so slow that I couldn't test anything for months anyway)

  The whole thing of writing a GUI library from scratch in plain C89 was sort
  of a masochistic joke, but it turns out to be usefull anyway, as I'm not
  really satisfied with the existing toolkits (QT, GTK, FLTK, etc...) as they
  are huge, bloated, horribly complicated and don't provide the functionalliy
  I want.


  This is shit!
  *************

  Hence the name sgui. If you have suggestions for improvements, drop me a
  line.


  License
  *******

 Copyright (C) 2012 - David Oberhollenzer

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.

