/**
\page hacking

\section build The SGUI build system

\note For an overview on how to use the build system, how to compile SGUI,
      how to configure the build system and what options are available,
      please refere to \ref compiling.

\subsection stree The source directory tree

The library is split into several components, each in a dedicated
subdirectory, that are then compiled into a single library:
 - \b core contains basic widget data structure, widget handling, window
   system abstraction, font rendering, helper data structures, etc.
 - \b widgets contains only the implementations of the individual widgets.
 - \b dialogs contains only the implementations of the individual dialog
   windows.

Each of those modules contains an \b include directory with headers,
a \b src directory with source files and a \b CMakeLists.txt.

Other than that, there are few more sub directories:
 - \b build contains the build output, see below.
 - \b CMake contains CMake files (e.g. mingw cross toolchain config)
 - \b doc contains the documentation you are reading right now
 - \b extras contains example and demo programms
 - \b tests contains unit tests

In addition, the source directory contains a \b CMakeLists.txt, a doxygen
\b Doxyfile.in file that is used to generate the actual doxygen input file,
the textfiles \b LICENSE and \b README as well as an \b sgui_config.in file
that is used to generate a header with compile configuration.

The combined \b include directories, the \b extras directory and the generated
doxygen output end up in the development package.

Everything inside the source tree ends up in the source package.

The \b LICENSE and \b README files are added to every package.

\subsection otree The output directory tree

The output directory initially contains the following entries:
 - \b font contains the TTF font file required by the
   example and demo programs.
 - \b win_dep contains additional dependencies for the Windows&reg; build
   (currently only FreeType binaries and headers).
 - \b runvalgrind.sh runs valgrind on a sample program using the given
   valgrind supression file.
 - \b valgrind.supp is a valgrind supression file that's supposed to hide
   reported memory leeks inside the X11 XIM functions, and Mesa3D.

When building SGUI, a lot of temporary clutter is generated by CMake and make.
The interesting directores are \b bin and \b lib, the former
containing executables and (on Windows&reg; dynamic libraries) and the later
containing static libraries and (on Unix-like systems dynamic libraries).

\subsection cmake The CMake build system

The toplevel CMakeLists.txt in the SGUI source root directory contains, in
the following order:
 - General settings and output path confiugration
 - Compilation options
 - Compiler detection and compiler specific configuration
 - Operating system detection and OS specific configuration
 - Dependency configuration (mostly also OS specific)
 - Compilation target configuration<
 - Doxygen target
 - Packaging and installation configuration

The subdirectories "core", "widgets" and "dialogs" also contain
CMakeLists.txt files. However, those do not add any build targets. They load
a list of source files into CMake variables named after the subdirectories
(\b CORE_SRC, \b WIDGETS_SRC and \b DIALOGS_SRC). Those variables are then
used in the toplevel CMakeLists.txt to setup the target \b sgui, since the
sources from those subdirectores are compiled into one binary, the
sgui libary itself.

The directories \b extras and \b tests contain CMakeLists.txt files that
actually add compilation targets for executables that use SGUI without
any exterenal intervention from the toplevel file.
*/
